#!/bin/bash
# vi:syntax=sh

set -e

if [[ -n "${1}" ]]
then
        REPORT_FROM_DATE="$(date -d ${1})"
else
        EXECUTION_DATE="$(date +%F)"
        REPORT_FROM_DATE="$(date -d ${EXECUTION_DATE} --date '-1 week' +%F)"
fi

CLAIMS_OUTPUT_FILE_NAME=Claims_submitted_since_${REPORT_FROM_DATE}.csv
RESPONSES_OUTPUT_FILE_NAME=Responses_submitted_since_${REPORT_FROM_DATE}.csv
CCJS_OUTPUT_FILE_NAME=CCJs_submitted_since_${REPORT_FROM_DATE}.csv
NOAT_OUTPUT_FILE_NAME=Total_number_settlement_attempted_since_${REPORT_FROM_DATE}.csv
NSAT_OUTPUT_FILE_NAME=Total_number_settlement_reached_since_${REPORT_FROM_DATE}.csv
TCAI_OUTPUT_FILE_NAME=Total_claim_amount_issued_since_${REPORT_FROM_DATE}.csv
TFC_OUTPUT_FILE_NAME=Total_fees_collected_since_${REPORT_FROM_DATE}.csv
CAFC_OUTPUT_FILE_NAME=Claims_against_fee_band_since_${REPORT_FROM_DATE}.csv

OUTPUT_DIR={{ reporting_output_directory }}
TO_ADDRESS={{ service_manager_to_address }}
FAILURE_ADDRESS={{ reporting_failure_address }}

function log() {
  echo $(date --rfc-3339=seconds)" ${1}"
}

function errorHandler() {
  local report_failed_error="Service owner report failed for ${REPORT_FROM_DATE}"
  local environment=$(getEnvironment)
  log "${report_failed_error}"
  echo -e "Hi\n${report_failed_error} in ${environment}" | mail -s "Service owner report ${REPORT_FROM_DATE} failed in ${environment}" -r "noreply@reform.hmcts.net (Money Claim Payments)" ${FAILURE_ADDRESS}
}

function getEnvironment() {
    case $(hostname | awk '{print tolower($0)}') in
    betadeva*)
      ENV=Dev
      ;;
    betadevb*)
      ENV=Test
      ;;
    betademo*)
      ENV=Demo
      ;;
    betapreprod*)
      ENV=Staging
      ;;
    betaprod*)
      ENV=Production
      ;;
      *)
      log 'Unknown environment' || false
    esac
    echo ${ENV}
}

trap errorHandler ERR

mkdir -p ${OUTPUT_DIR}

log "Running submitted claims query"
CLAIMS_QUERY=$(cat <<EOF
COPY (
  SELECT
    q1.claimant_email,
    q1.claimant_name,
    q2.claim_amount,
    q1.fee_paid,
    q1.defendant_email_provided,
    q1.claim_submitted_at_date,
    q1.claim_submitted_at_time
  FROM (
    SELECT
      id AS claim_id,
      submitter_email AS claimant_email,
      jsonb_extract_path(claim, 'claimants') -> 0 ->> 'name' AS claimant_name,
      round(
        jsonb_extract_path_text(claim, 'feeAmountInPennies')::DECIMAL / 100,
        2
      ) AS fee_paid,
      CASE WHEN jsonb_extract_path(claim, 'defendants') -> 0 ->> 'email' IS NOT NULL
        THEN 'yes'
        ELSE 'no'
      END AS defendant_email_provided,
      to_char(created_at, 'DD/MM/YYYY') as claim_submitted_at_date,
      to_char(created_at, 'HH24:MI:SS') as claim_submitted_at_time
    FROM
      claim
    WHERE
      jsonb_extract_path_text(claim, 'claimants') NOT LIKE '%representative%' AND
      created_at > '${REPORT_FROM_DATE}'
  ) q1
  INNER JOIN (
    WITH amounts AS (
      SELECT
        id AS claim_id,
        jsonb_array_elements(
          jsonb_extract_path(claim, 'amount') -> 'rows'
        ) AS amount_rows
      FROM
        claim
      WHERE
        jsonb_extract_path_text(claim, 'claimants') NOT LIKE '%representative%' AND
        created_at > '${REPORT_FROM_DATE}'
    )
    SELECT
      claim_id,
      round(
        sum((amount_rows->>'amount')::DECIMAL),
        2
      ) AS claim_amount
    FROM
      amounts
    GROUP BY
      claim_id
  ) q2
  ON
    q1.claim_id = q2.claim_id
  ORDER BY
    q1.claim_submitted_at_date,
    q1.claim_submitted_at_time
) TO STDOUT WITH CSV HEADER
EOF
)
psql -d claimstore -c "${CLAIMS_QUERY}" > "${OUTPUT_DIR}/${CLAIMS_OUTPUT_FILE_NAME}"

CLAIMS_COUNT=$(awk '{if (NR!=1) {print}}' ${OUTPUT_DIR}/${CLAIMS_OUTPUT_FILE_NAME} | wc -l)
log "Finished submitted claims query, there were ${CLAIMS_COUNT} claims submitted since ${REPORT_FROM_DATE}"

log "Running submitted responses query"
RESPONSES_QUERY=$(cat <<EOF
COPY (
  SELECT
    defendant_email,
    jsonb_extract_path(response, 'defendant') -> 'name' AS defendant_name,
    jsonb_extract_path(response, 'freeMediation') AS free_mediation_requested,
    CASE WHEN jsonb_extract_path(claim, 'defendants') -> 0 ->> 'address' = jsonb_extract_path(response, 'defendant') ->> 'address'
      THEN 'no'
      ELSE 'yes'
    END AS address_updated,
    to_char(responded_at, 'DD/MM/YYYY') as responded_at_date,
    to_char(responded_at, 'HH24:MI:SS') as responded_at_time
  FROM
    claim
  WHERE
    jsonb_extract_path_text(claim, 'claimants') NOT LIKE '%representative%' AND
    response IS NOT NULL AND
    responded_at > '${REPORT_FROM_DATE}'
  ORDER BY
    responded_at_date,
    responded_at_time
) TO STDOUT WITH CSV HEADER
EOF
)
psql -d claimstore -c "${RESPONSES_QUERY}" > "${OUTPUT_DIR}/${RESPONSES_OUTPUT_FILE_NAME}"

RESPONSES_COUNT=$(awk '{if (NR!=1) {print}}' ${OUTPUT_DIR}/${RESPONSES_OUTPUT_FILE_NAME} | wc -l)
log "Finished submitted responses query, there were ${RESPONSES_COUNT} responses submitted since ${REPORT_FROM_DATE}"

log "Running submitted County Court Judgements query"
CCJS_QUERY=$(cat <<EOF
COPY (
  SELECT
    submitter_email as claimant_email,
    jsonb_extract_path(claim, 'claimants') -> 0 ->> 'name' AS claimant_name,
    to_char(county_court_judgment_requested_at, 'DD/MM/YYYY') as requested_at_date,
    to_char(county_court_judgment_requested_at, 'HH24:MI:SS') as requested_at_time
  FROM
    claim
  WHERE
    jsonb_extract_path_text(claim, 'claimants') NOT LIKE '%representative%' AND
    county_court_judgment IS NOT NULL AND
    county_court_judgment_requested_at > '${REPORT_FROM_DATE}'
  ORDER BY
    requested_at_date,
    requested_at_time
) TO STDOUT WITH CSV HEADER
EOF
)
psql -d claimstore -c "${CCJS_QUERY}" > "${OUTPUT_DIR}/${CCJS_OUTPUT_FILE_NAME}"

CCJS_COUNT=$(awk '{if (NR!=1) {print}}' ${OUTPUT_DIR}/${CCJS_OUTPUT_FILE_NAME} | wc -l)
log "Finished submitted County Court Judgements query, there were ${CCJS_COUNT} CCJs submitted since ${REPORT_FROM_DATE}"

log "Calculating numbers  of offers attempted query"
NOAT_QUERY=$(cat <<EOF
COPY (
    SELECT
      count(*) AS total_offer_tried
    FROM
      claim
    WHERE
      jsonb_extract_path_text(claim, 'claimants') NOT LIKE '%representative%' AND
      settlement IS NOT NULL AND
      created_at > '${REPORT_FROM_DATE}'

) TO STDOUT WITH CSV HEADER
EOF
)
psql -d claimstore -c "${NOAT_QUERY}" > "${OUTPUT_DIR}/${NOAT_OUTPUT_FILE_NAME}"
log "Finished calculating numbers  of offers attempted query"


log "Calculating numbers  of settlement agreed query"
NSAT_QUERY=$(cat <<EOF
COPY (
    SELECT
      count(*) AS total_settlement_agreed
    FROM
      claim
    WHERE
      jsonb_extract_path_text(claim, 'claimants') NOT LIKE '%representative%' AND
      settlement IS NOT NULL AND
      settlement_reached_at IS NOT NULL AND
      created_at > '${REPORT_FROM_DATE}'

) TO STDOUT WITH CSV HEADER
EOF
)
psql -d claimstore -c "${NSAT_QUERY}" > "${OUTPUT_DIR}/${NSAT_OUTPUT_FILE_NAME}"
log "Finished calculating numbers of settlement agreed query"

log "Calculating total value of claim amounts issued"
TCAI_QUERY=$(cat <<EOF
COPY (
  WITH amounts AS (
  SELECT
    jsonb_array_elements(
      jsonb_extract_path(claim, 'amount') -> 'rows'
    ) AS amount_rows
  FROM
    claim
  WHERE
    jsonb_extract_path_text(claim, 'claimants') NOT LIKE '%representative%' AND
    created_at > '${REPORT_FROM_DATE}'
  )
	SELECT
	  round(sum((amount_rows->>'amount')::DECIMAL), 2) AS total_claim_amount
	FROM
	  amounts
TO STDOUT WITH CSV HEADER
EOF
)
psql -d claimstore -c "${TCAI_QUERY}" > "${OUTPUT_DIR}/${TCAI_OUTPUT_FILE_NAME}"
log "Finished calculating total value of claim amounts issued since ${REPORT_FROM_DATE}"


log "Calculate total value of fee's collected"
TFC_QUERY=$(cat <<EOF
COPY (
	SELECT
		  sum(round(
			jsonb_extract_path_text(claim, 'feeAmountInPennies')::DECIMAL / 100, 2) ) AS total_fees_collected
	FROM
	  claim
	WHERE
	jsonb_extract_path_text(claim, 'claimants') NOT LIKE '%representative%' AND
	created_at > '${REPORT_FROM_DATE}'
TO STDOUT WITH CSV HEADER
EOF
)
psql -d claimstore -c "${TFC_QUERY}" > "${OUTPUT_DIR}/${TFC_OUTPUT_FILE_NAME}"
log "Finished total value of fee's collected since ${REPORT_FROM_DATE}"


log "Calculating number of claims issued per fee band"
CAFC_QUERY=$(cat <<EOF
COPY (
    SELECT
        count(*) AS Total_claim,
        jsonb_extract_path_text(claim, 'feeCode') AS fee_code
    FROM
      claim
    WHERE
    jsonb_extract_path_text(claim, 'claimants') NOT LIKE '%representative%' AND
    created_at > '${REPORT_FROM_DATE}'
    group by fee_code
TO STDOUT WITH CSV HEADER
EOF
)
psql -d claimstore -c "${CAFC_QUERY}" > "${OUTPUT_DIR}/${CAFC_OUTPUT_FILE_NAME}"
log "Finished number of claims issued per fee band since ${REPORT_FROM_DATE}"


log "Sending email with service owner report results to: ${TO_ADDRESS}"
echo -e "Hi\nPlease find attached service owner report for ${REPORT_FROM_DATE}.\nThere were ${CLAIMS_COUNT} claims(s), ${RESPONSES_COUNT} response(s) and ${CCJS_COUNT} CCJs" | mail -s "Service owner report for ${REPORT_FROM_DATE}" -a ${OUTPUT_DIR}/${CLAIMS_OUTPUT_FILE_NAME} -a ${OUTPUT_DIR}/${RESPONSES_OUTPUT_FILE_NAME} -a ${OUTPUT_DIR}/${CCJS_OUTPUT_FILE_NAME} -a ${OUTPUT_DIR}/${NOAT_OUTPUT_FILE_NAME} -a ${OUTPUT_DIR}/${NSAT_OUTPUT_FILE_NAME} -a ${OUTPUT_DIR}/${TCAI_OUTPUT_FILE_NAME} -a ${OUTPUT_DIR}/${TFC_OUTPUT_FILE_NAME} -a ${OUTPUT_DIR}/${TCAI_OUTPUT_FILE_NAME}-r "noreply@reform.hmcts.net (Money Claim reporting)" ${TO_ADDRESS}
log "Service owner report results sent"
